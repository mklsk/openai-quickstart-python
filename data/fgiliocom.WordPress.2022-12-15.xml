<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/6.1.1" created="2022-12-15 14:41" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>fgilio.com</title>
	<link>https://fgilio.com</link>
	<description>A blog about code and useful tips</description>
	<pubDate>Thu, 15 Dec 2022 14:41:47 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://fgilio.com</wp:base_site_url>
	<wp:base_blog_url>https://fgilio.com</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[franco.gilio@gmail.com]]></wp:author_login><wp:author_email><![CDATA[franco.gilio@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Franco Gilio]]></wp:author_display_name><wp:author_first_name><![CDATA[Franco]]></wp:author_first_name><wp:author_last_name><![CDATA[Gilio]]></wp:author_last_name></wp:author>

				
	<generator>https://wordpress.org/?v=6.1.1</generator>

<image>
	<url>https://fgilio.com/wp-content/uploads/2019/03/cropped-20190201bw_512_mail_signature-32x32.png</url>
	<title>fgilio.com</title>
	<link>https://fgilio.com</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title><![CDATA[The first one]]></title>
		<link>https://fgilio.com/1st-blog-post/</link>
		<pubDate>Sun, 06 Aug 2017 00:40:22 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">http://fgilio.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is the first post on this brand new blog<strong>ï»¿</strong>, and it has a very descriptive title.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I wanted to start a blogging for some time, but always ended up postponing it. Mainly because of a generous dose of impostor syndrome, but also because I haven't been good at making the time to make the blog, in the first place. And, yes, as a developer I wanted my blog to be just perfect.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, here we are. This is me forcing myself to start sharing, on a sketchy and rushed blog.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, I love WordPress and this gives me an excuse to tinker with it a little more ever since I stopped working with it daily.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I honestly have no clue if this is going to be a weekly thing, monthly or whatever. Though it won't be daily for sure. Let's just see how it feels to share some thoughts, things I learn or anything else.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Talk to you in the next one!</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":25} -->
<div style="height:25px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p><em>PD 1</em>ï»¿: I think most of the next posts will be just some meticulously crafted micro tutorials/reminders of some of the code snippets I have stored like everywhere.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>ï»¿<strong>ï»¿</strong>PD 2</em>: As you can see there's no comments available here, but there will be in the upcoming entries.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>PD 3</em>: Saw that line above where I said that "I wanted to start a blogging for some time", well I've this post drafted out for 7 months.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2017-08-06 00:40:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-06 00:40:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-05-06 02:51:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-05-06 02:51:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1st-blog-post]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="general"><![CDATA[General]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[welcome-to-cloudways]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sharing_disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1670683817;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:29;}i:1;a:1:{s:2:"id";i:335;}i:2;a:1:{s:2:"id";i:649;}i:3;a:1:{s:2:"id";i:54;}i:4;a:1:{s:2:"id";i:79;}i:5;a:1:{s:2:"id";i:201;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[first]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[first]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[The first one - fgilio.com]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[I wanted to start a blogging for some time, but always ended up postponing it. Mainly because of a generous dose of impostor syndrome, but also because I haven't been good at making the time to make the blog, in the first place. And, yes, as a developer I wanted my blog to be just perfect.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[74]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to keep an SSH session alive]]></title>
		<link>https://fgilio.com/how-to-keep-an-ssh-session-alive/</link>
		<pubDate>Sun, 06 Aug 2017 05:41:11 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[&#42; This is a <em>Has it ever happened to you...</em> kind of post.

Imagine you're logged in to a server doing some magical stuff. Then you go grab a coffee and when you come back... you're logged out from the server. Yes, it sucks. You have to SSH in again and cd into the same dir you were before, etc. <a href="https://fgilio.com/wp-content/uploads/2017/08/Aint-nobody-got-time-for-that.jpg">Ain't nobody go time for that</a>.

What if I told you that you can keep an SSH session alive? ðŸš€
All you have to do is edit your <code>~/.ssh/config</code> file and add the following:

<pre><code>Host *
ServerAliveInterval 60
</code></pre>

You can define a specific host, and choose the interval. Most servers with which I have this issue have a rather low timeout, so I've chosen to send the keep alive signal every 60 seconds.

And baam, you've freed yourself from this annoyance.

<a href="https://stackoverflow.com/questions/25084288/keep-ssh-session-alive">rockymonkey555</a> over <a href="stackoverflow.com">stackoverflow.com</a> recommends to also <code>chmod 600 ~/.ssh/config</code>, "because the config file must not be world-readable".

I hope this is as useful to you as it's been for me.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2017-08-06 05:41:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-06 05:41:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-09-12 00:07:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-09-12 00:07:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-keep-an-ssh-session-alive]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="servers"><![CDATA[Servers]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[SSH]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[75]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1670880881;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:79;}i:1;a:1:{s:2:"id";i:649;}i:2;a:1:{s:2:"id";i:201;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Lucas NuÃ±ez]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lucas.nz.d@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://lucasnz.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-08-15 15:39:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-08-15 15:39:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Happened every time... :')]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Cherry-picking your way out of trouble]]></title>
		<link>https://fgilio.com/cherry-picking-your-way-out-of-trouble/</link>
		<pubDate>Mon, 14 Aug 2017 21:36:47 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[I find <code>cherry-pick</code> to be one of those great underutilized features of git. And maybe that's good, because it's mainly used to apply hot fixes.

The way it works is very simple, it just let's you merge one or more commits from one branch onto another. Awesome, right?

Imagine a situation in which you have two branches, master and payments-refactor.
You're battling your way out of a thought refactor and suddenly a bug emerges in production, but you find out that you've already fixed it during the refactor and have an isolated commit containing the changes. You need to replicate those changes in the master branch and re deploy the app. But copy-pasting, or manually re doing the 
 changes, is cumbersome and probably even error prone. Well, <code>cherry-pick</code>&nbsp;comes to the rescue. It let's us replicate that single commit onto the master branch, all while preventing duplicate work and keeping our git history clean.
The only thing we need is the abbreviated commit hash (or all of it), we move to the branch where we want to incorporate the changes and use it like this:

<pre><code class="bash">git checkout master
git cherry-pick 3f75a585
</code></pre>

That's all!

I hope you have to use this as little as possible, but find it useful when the time comes.

What do you think of <code>cherry-pick</code>, what do you use it for?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2017-08-14 21:36:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-14 21:36:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-09-12 00:08:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-09-12 00:08:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cherry-picking-your-way-out-of-trouble]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="cherry-pic"><![CDATA[cherry-pic]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="hot-fix"><![CDATA[hot fix]]></category>
		<category domain="post_tag" nicename="source-control"><![CDATA[source control]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[77]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671039156;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:79;}i:1;a:1:{s:2:"id";i:359;}i:2;a:1:{s:2:"id";i:100;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Easily transfer entire local directories to Amazon S3 using s3-parallel-put]]></title>
		<link>https://fgilio.com/easily-transfer-entire-local-directories-to-amazon-s3-using-s3-parallel-put/</link>
		<pubDate>Mon, 04 Sep 2017 05:09:03 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[A couple of weeks ago I faced the need to upload a large number of files to Amazon S3, we're talking about lots of nested directories and ~100gb. So, after entering panic-mode for a couple of seconds I turned to our trusty Google and kindly filled its input with "transfer from local to amazon s3" (well, I don't really remember what I searched). I was not feeling really hopeful until I found <strong>s3-parallel-put</strong>, which seemed to do just what I needed.

Here's the repo: https://github.com/mishudark/s3-parallel-put

It's a smart little phyton script that does just that, transfer possibly huge amounts of files to Amazon S3. And, yes it can parallelize the workload making it blazing fast.

It has a couple of dependencies:

<pre><code class="bash"># Make sure to have pip updated.
# You may need to use sudo
apt-get update &amp;&amp; apt-get -y install python-pip
pip install boto
pip install python-magic
</code></pre>

Then, to install it, you just have to download the thing and make it executable:

<pre><code class="bash">curl https://raw.githubusercontent.com/mishudark/s3-parallel-put/master/s3-parallel-put &gt; s3-parallel-put
chmod +x ./s3-parallel-put
</code></pre>

It needs the AWS credentials as environment variables, which you can easily set:

<pre><code class="bash">export AWS_ACCESS_KEY_ID=&lt;blablablablablablabla&gt;
export AWS_SECRET_ACCESS_KEY=&lt;blebleblebleblebleblebleblebeble&gt;
</code></pre>

And, finally, you fire it up like this:

<pre><code class="bash"># This is considering that the script is in the current directory
./s3-parallel-put --bucket=&lt;enter-destination-bucket-name-here&gt; --bucket_region=us-west-2 --put=update --processes=30 --content-type=guess --log-filename=./s3pp.log /path/to/source/directory
</code></pre>

You can do a dry run with <code>--dry-run</code>.

You can speed up the upload using <code>--put=stupid</code>. It won't check if the object already exists, thus making fewer calls. Use with caution.

You can grant public read access to objects with <code>--grant=public-read</code>.

You may noticed that you can specify a log file, which is really handy because sometimes stuff happens. But, you may also end up with an enormous log file. So here is a quick grep to search for any errors <code>grep "ERROR" s3pp.log</code>.

And that's all. It has a lot more options that might come handy depending on your needs,so I encourage you to go and check it out.

Thanks for reading, and I hope you find this as useful as I did.

Let me know in the comments if you have any tips.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2017-09-04 05:09:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-04 05:09:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-09-12 00:03:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-09-12 00:03:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[easily-transfer-entire-local-directories-to-amazon-s3-using-s3-parallel-put]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="command-line"><![CDATA[command line]]></category>
		<category domain="category" nicename="misc"><![CDATA[Misc]]></category>
		<category domain="post_tag" nicename="s3"><![CDATA[S3]]></category>
		<category domain="post_tag" nicename="transfer"><![CDATA[Transfer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[74]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671021270;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:359;}i:1;a:1:{s:2:"id";i:100;}i:2;a:1:{s:2:"id";i:201;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[So you wanna yarn add a dependency from a git repo?]]></title>
		<link>https://fgilio.com/so-you-wanna-yarn-add-a-dependency-from-a-git-repo/</link>
		<pubDate>Sun, 08 Oct 2017 20:53:14 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[I'm posting this because, even if really basic stuff, I've bumped my head with this wall way too many times before successfully managing to accomplish the task: Use <code>yarn add</code> to pull a dependency while using a git repo as the source.

It is, in fact, really simple (though I feel is way to verbose (? ):

<pre><code class="bash">yarn add git+ssh://git@gitlab.com:organization/project
</code></pre>

You can even specify use a branch or particular commit by adding it at the end, like this:

<pre><code class="bash"># To point to a branch:
yarn add git+ssh://git@gitlab.com:organization/project#dev
# To point to a commit we just use the hash (short one is this case):
yarn add git+ssh://git@gitlab.com:organization/project#c8023772
</code></pre>

It's also listed in the official docs: https://yarnpkg.com/lang/en/docs/cli/add/

So, have you ever had to do this? Do you find it useful?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2017-10-08 20:53:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-08 20:53:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-10-08 21:10:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-10-08 21:10:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[so-you-wanna-yarn-add-a-dependency-from-a-git-repo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="dependency"><![CDATA[dependency]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="misc"><![CDATA[Misc]]></category>
		<category domain="post_tag" nicename="yarn"><![CDATA[yarn]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671071135;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:359;}i:1;a:1:{s:2:"id";i:42;}i:2;a:1:{s:2:"id";i:29;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[88]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Working with discount coupons in Laravel Spark]]></title>
		<link>https://fgilio.com/working-with-discount-coupons-in-laravel-spark/</link>
		<pubDate>Wed, 29 Nov 2017 00:09:50 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>**&nbsp;<strong>EDIT 2018/04/04</strong>: This is applicable to both Spark 6 and 5</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>**&nbsp; EDIT 2018/10/19</strong>: This posts was made for Spark 5, but most likely it still perfectly applies to Spark . I've read the changelog and upgrade instructions, and those do not mention any changes regarding coupons. I'll update this post once we upgrade to Spark 7.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A couple of days ago it was Black Friday and at <a href="https://publica.la">publica.la</a> we decided to put out a beefy discount for new customers. Thankfully we use Laravel Spark to handle all the SaaS boilerplate needed to bill our clients, but while it does offer full support for discount coupons... IMO the <a href="https://spark.laravel.com/docs/5.0/billing#site-wide-promotions">docs</a> are a bit lacking. I even <a href="https://twitter.com/fgili0/status/933759259250184192">tweeted</a> asking for help but, ironically, all I got was a <a href="https://twitter.com/dev_jagroop/status/933988225256787968">response</a> from a guy that though I was looking for a discount to actually buy Spark.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color">* I'm going to make the assumption that you're using Stripe as the gateway, but Braintree should be pretty similar (tell us in the comments if you know about it).<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Spark offers two different ways to go about coupons:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>1.</strong> Individually with every purchase, like you would expect from any kind of system. This is the one that's missing in the docs. Basically, you need to setup your coupons 100% on&nbsp;<a href="https://stripe.com/docs/subscriptions/discounts">Stripe</a> side and then use it as a query string on your Spark powered site. So, for example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>https://your.site/?coupon=coupon_code_here</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With that in place, Spark will then automatically validate it against Stripe and show an input box in case the user wants to change the code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>ï»¿2.</strong> And the other is called <strong>site-wide promotions</strong> , which is exactly what we needed <img draggable="false" class="emoji" alt="ðŸŽ‰" src="https://s.w.org/images/core/emoji/2.4/svg/1f389.svg" scale="0">! The way it works is by globally forcing a coupon code in the query string section of the URL (don't worry, it won't mess with any existing values), but still letting the users change it case they want to. Yep, perfect for a Black Friday kind of deal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All you need to do is use this code:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/*
 * This will probably go in your SparkServiceProvider.php
 */
Spark::promotion('coupon_code_here');</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2017-11-29 00:09:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-29 00:09:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-10-19 13:37:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-10-19 13:37:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[working-with-discount-coupons-in-laravel-spark]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="coupon"><![CDATA[Coupon]]></category>
		<category domain="post_tag" nicename="discount"><![CDATA[Discount]]></category>
		<category domain="category" nicename="laravel"><![CDATA[Laravel]]></category>
		<category domain="post_tag" nicename="laravel-spark"><![CDATA[Laravel Spark]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="stripe"><![CDATA[Stripe]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671102412;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:335;}i:1;a:1:{s:2:"id";i:649;}i:2;a:1:{s:2:"id";i:196;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[178]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Josh Soileau]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[joshua.soileau@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.reviewy.co/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-04-04 00:44:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-04-04 00:44:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This was exactly what I was looking for (the coupon query string that's not documented anywhere).

I didn't want to apply a sitewide coupon for every new registry, but I want to be able to send select customers a specific coupon just for them.

Thanks a ton!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Franco gilio]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[franco.gilio@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-04-05 16:05:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-04-05 16:05:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Josh, I'm glad you found it useful!
It's a shame this is not documented anywhere, I'll send a tweet to Tailor to see if maybe they add it.

EDIT: I see that the formatting totally broke in this post, sorry for that... I'll fix it]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[How to use Laravel's Job chaining]]></title>
		<link>https://fgilio.com/how-to-use-laravel-queue-job-chaining/</link>
		<pubDate>Fri, 26 Jan 2018 22:29:44 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:subhead -->
<p class="wp-block-subhead">This is a personal one, I simply love how clean and simple this feature is.</p>
<!-- /wp:subhead -->

<!-- wp:paragraph -->
<p>In the past, I've had to implement job chaining and TBH the end result was pretty gross. It was a system that needed to take a file and pass it through a series of steps, so nothing too complex. But, by the way the chain worked, every job was conscious about the next one in line (sans the last one, of course).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But now, how Laravel does it allows us to completely decouple the jobs from each other. Yeah, I know, it's awesome.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It looks like this:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>FirstJobToRun::withChain([
    new SecondJobToRun,
    new ThirdJobToRun,
    new ForthJobToRun
])->dispatch();</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So yes, it's that simple. But if you are like me, simple is never enough cause of course you have that one case in which you need to pass arguments to your jobs. So, how about that? Well, thankfully it's simple too.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here in this example I've taken the one from the <a href="https://laravel.com/docs/5.5/queues#job-chaining">official docs</a> and added a simple parameter:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>ProcessPodcast::withChain([
    new OptimizePodcast($podcast),
    new ReleasePodcast($podcast)
])->dispatch($podcast);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And that's all, now go <a href="https://laravel.com/docs/5.5/queues#job-chaining">read the official docs</a> and then refactor all those tangled job chains that you've written before.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Thank you to all those who worked on this.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PD: Wouldn't it be really cool if we could just define common arguments for all jobs in a chain?</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2018-01-26 22:29:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-26 22:29:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-03-15 23:01:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-03-15 23:01:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-use-laravel-queue-job-chaining]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="laravel"><![CDATA[Laravel]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="queues"><![CDATA[queues]]></category>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671137473;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:335;}i:1;a:1:{s:2:"id";i:649;}i:2;a:1:{s:2:"id";i:100;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[laravel queue]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[laravel queue]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[how-to-use-laravel-job-chaining__trashed]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[how-to-use-laravel-job-chaining]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Learn how to chain Laravel queue jobs, decouple them from each other and pass arguments]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[39]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Learn how to import a function() in PHP]]></title>
		<link>https://fgilio.com/how-to-import-a-function-in-php/</link>
		<pubDate>Thu, 07 Mar 2019 03:08:01 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=201</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>TIL<strong>*Â¹</strong> you can <strong>import just a function</strong> in a .php file, like we do with classes. It works from <a href="http://php.net/manual/en/language.namespaces.importing.php">PHP 5.6+</a>, so there's no weird compatibility issue. And it's dead simple.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's an example from <a href="https://github.com/thecodingmachine/safe">Safe PHP</a>, specifically let's say we want to use the safer<strong>*Â²</strong> version of <code>json_decode</code>. Pay attention at how this allows us to override PHP's default <code>json_decode</code> global function: </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// First we import it
use function Safe\json_decode;

// And then we just use it
$foobar = json_decode($content);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Yes, it's not a jode. That's all. You tell PHP that what you're importing is a function and the just use the function's name instead of a class name. After that, you can use said function in you code as if it were a global or local function. How cool is that?!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:list -->
<ul><li><strong>*1</strong> Not really today, this post was in draft state since 2017/12/22 o.o</li><li><strong>*2</strong> These are a set of core PHP functions rewritten to throw exceptions instead of returning <code>false</code> when an error is encountered. For more information about this project you can go to their repo <a href="https://github.com/thecodingmachine/safe">https://github.com/thecodingmachine/safe</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2019-03-07 03:08:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-07 03:08:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-11-29 07:16:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-11-29 10:16:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-import-a-function-in-php]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671099800;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:649;}i:1;a:1:{s:2:"id";i:196;}i:2;a:1:{s:2:"id";i:335;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[learn how to import a function() in PHP]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[46]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[You can import just a function in a .php file, like we do with classes. And it's dead simple.]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to move a column in a Laravel migration]]></title>
		<link>https://fgilio.com/how-to-move-a-column-in-a-laravel-migration/</link>
		<pubDate>Thu, 07 Mar 2019 06:29:51 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This post could have also be titled "How to move a column in MySQL" or "How to move a column with SQL"... I guess you get it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sometimes you just have to <em>ship it and ship it now</em>â„¢ and, in the heat of the moment, you could oversee the order of some database columns. Or maybe you just have OCD and need to see things organized like they should be (don't judge me, I'm only human).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well, worry not! While this functionality is not built in Laravel it is actually quite simple to do with a raw DB query, here you have an example in which we're moving the <code>external_id</code> column after the <code>id</code> one:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>use Illuminate\Support\Facades\DB;

// This goes inside a migration file
DB::statement('ALTER TABLE users MODIFY COLUMN external_id VARCHAR(255) AFTER id');</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Those of you paying attention would have picked up that we are redefining the column type (<code>VARCHAR(255)</code>), it's a little of an annoyance but it's also required. In case you don't know the syntax for a column you want to move, you could use a program like Table Plus or Sequel Pro to copy the table's insert statement and extract the portion corresponding of the column in question.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Have you ever needed to do such a thing?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>2019/07/16 EDIT</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://fgilio.com/how-to-set-a-columns-position-in-a-laravel-migration/">How to set a column's position in a Laravel migration</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2019-03-07 03:29:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-07 06:29:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-16 15:02:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-16 18:02:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-move-a-column-in-a-laravel-migration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="general"><![CDATA[General]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4b1a9021f89c07cbaea30e3d70ebacee]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_74aa9707f94d588b2bc15835015845ea]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_207c722e58c00648208968d160bb443c]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="W2t6Koivtw"><a href="http://kodeinfo.com/post/moving-column-in-migration-laravel/">MOVING COLUMN IN MIGRATION â€“ LARAVEL</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://kodeinfo.com/post/moving-column-in-migration-laravel/embed/#?secret=W2t6Koivtw" data-secret="W2t6Koivtw" width="588" height="331" title="&#8220;MOVING COLUMN IN MIGRATION â€“ LARAVEL&#8221; &#8212; KodeInfo - Learning resources for web and mobile" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_207c722e58c00648208968d160bb443c]]></wp:meta_key>
		<wp:meta_value><![CDATA[1529784157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_401da4f2bbfe85c86ab7f5b63c717670]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="FIUvBwmAZi"><a href="http://kodeinfo.com/post/moving-column-in-migration-laravel/">MOVING COLUMN IN MIGRATION â€“ LARAVEL</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://kodeinfo.com/post/moving-column-in-migration-laravel/embed/#?secret=FIUvBwmAZi" data-secret="FIUvBwmAZi" width="600" height="338" title="&#8220;MOVING COLUMN IN MIGRATION â€“ LARAVEL&#8221; &#8212; KodeInfo - Learning resources for web and mobile" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_401da4f2bbfe85c86ab7f5b63c717670]]></wp:meta_key>
		<wp:meta_value><![CDATA[1551928146]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671125651;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:649;}i:1;a:1:{s:2:"id";i:196;}i:2;a:1:{s:2:"id";i:100;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a789cdf880d7d317b4d646a2ea8e961a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[This post could have also be titled "How to move a column in MySQL" or "How to move a column with SQL"... I guess you get it.]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to mark something as binary in git]]></title>
		<link>https://fgilio.com/how-to-mark-something-as-binary-in-git/</link>
		<pubDate>Thu, 05 Apr 2018 16:01:57 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=359</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Sometimes you may want to override git&#x27;s decision of wheter a file contains text or binary data. For example, you may have to pull in some external library and want git to track it but not diff it inside. For this, git lets you define what to do with specific files or entire directories.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Simply add a `.gitattributes` file in the root of the project, or in the parent directory of the one you want to affect, and use the following syntax:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># For files
file.txt binary
# For entire directories
folder/* binary </code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>359</wp:post_id>
		<wp:post_date><![CDATA[2018-04-05 16:01:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-05 16:01:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-04-05 16:02:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-04-05 16:02:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-mark-something-as-binary-in-git]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="general"><![CDATA[General]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671110775;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:54;}i:1;a:1:{s:2:"id";i:79;}i:2;a:1:{s:2:"id";i:42;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[binary in git]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[binary in git]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Git lets you define if specific files or entire directories should be treated as binary data.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to set a column's position in a Laravel migration]]></title>
		<link>https://fgilio.com/how-to-set-a-columns-position-in-a-laravel-migration/</link>
		<pubDate>Tue, 16 Jul 2019 18:01:31 +0000</pubDate>
		<dc:creator><![CDATA[franco.gilio@gmail.com]]></dc:creator>
		<guid isPermaLink="false">https://fgilio.com/?p=649</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In a past post I wrote about <a href="https://fgilio.com/how-to-move-a-column-in-a-laravel-migration/">How to move a column in a Laravel migration</a>, but sometimes you're better prepared and want to define the position of the column while creating it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Fortunately Laravel makes this real simple and we can fluently decide if a column must be positioned first or after another.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To put the column in the first place we use <code>-&gt;first()</code>, for example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// Place the column first
Schema::table('users', function (Blueprint $table) {
    $table->string('external_id')->first();
});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To put the column after another we use <code>-&gt;after('column')</code>, for example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// Place the column after another column 
Schema::table('users', function (Blueprint $table) {
    $table->string('external_id')->after('id');
});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And that's all, I hope someone finds it useful.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>649</wp:post_id>
		<wp:post_date><![CDATA[2019-07-16 15:01:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-16 18:01:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-03 19:50:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-03 22:50:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-set-a-columns-position-in-a-laravel-migration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="general"><![CDATA[General]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1671126397;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:335;}i:1;a:1:{s:2:"id";i:100;}i:2;a:1:{s:2:"id";i:196;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_at_widget]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2621</wp:comment_id>
			<wp:comment_author><![CDATA[Yasir]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yasirhashmi15@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2607:fea8:f460:adf:74f9:71a9:aee7:eaaa]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-03 17:45:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-03 20:45:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It doesn't work. No errors but it's not rearranging the column.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2622</wp:comment_id>
			<wp:comment_author><![CDATA[Franco Gilio]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[franco.gilio@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[190.188.212.220]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-03 19:51:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-03 22:51:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you want to change the position of an existing column, this is what you need: https://fgilio.com/how-to-move-a-column-in-a-laravel-migration]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>2621</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
							</wp:comment>
					</item>
				</channel>
</rss>
	